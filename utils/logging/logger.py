"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π Telegram
"""
from loguru import logger
from telethon.events import NewMessage, CallbackQuery
from telethon.tl.types import User, Chat, Channel


def format_user_info(user) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤"""
    if hasattr(user, 'username') and user.username:
        return f"@{user.username} (ID: {user.id})"
    elif hasattr(user, 'first_name'):
        full_name = user.first_name
        if hasattr(user, 'last_name') and user.last_name:
            full_name += f" {user.last_name}"
        return f"{full_name} (ID: {user.id})"
    else:
        return f"ID: {user.id}"


def format_chat_info(chat) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/–≥—Ä—É–ø–ø–µ –¥–ª—è –ª–æ–≥–æ–≤"""
    if hasattr(chat, 'username') and chat.username:
        return f"@{chat.username} (ID: {chat.id})"
    elif hasattr(chat, 'title'):
        return f"{chat.title} (ID: {chat.id})"
    else:
        return f"Chat ID: {chat.id}"


def log_message_event(event: NewMessage.Event, action: str = "–ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ") -> None:
    """
    –ö—Ä–∞—Å–∏–≤–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥–∞")
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        if hasattr(event, 'sender_id') and event.sender_id:
            sender_info = f"ID: {event.sender_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message_text = "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        if hasattr(event.message, 'text') and event.message.text:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            text = event.message.text
            if len(text) > 100:
                text = text[:97] + "..."
            message_text = f'"{text}"'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat_info = "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        if hasattr(event.message, 'chat') and event.message.chat:
            if hasattr(event.message.chat, 'title'):
                chat_info = f"–ì—Ä—É–ø–ø–∞: {event.message.chat.title}"
        
        logger.info(f"üì® {action.capitalize()}: {message_text} –æ—Ç {sender_info} –≤ {chat_info}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def log_callback_event(event: CallbackQuery.Event, action: str = "–ø–æ–ª—É—á–µ–Ω callback") -> None:
    """
    –ö—Ä–∞—Å–∏–≤–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ callback query
    
    Args:
        event: –°–æ–±—ã—Ç–∏–µ callback query
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        if hasattr(event, 'sender_id') and event.sender_id:
            sender_info = f"ID: {event.sender_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
        callback_data = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if hasattr(event, 'data') and event.data:
            callback_data = event.data.decode('utf-8', errors='ignore')
        
        logger.info(f"üîò {action.capitalize()}: '{callback_data}' –æ—Ç {sender_info}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ callback —Å–æ–±—ã—Ç–∏—è: {e}")


def log_user_action(user_id: int, action: str, details: str = "") -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {action}"
    if details:
        message += f" - {details}"
    
    logger.info(message)


def log_broadcast_action(action: str, details: str = "") -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    
    Args:
        action: –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
        details: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    """
    message = f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞: {action}"
    if details:
        message += f" - {details}"
    
    logger.info(message)


def log_error_with_context(error: Exception, context: str = "") -> None:
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    
    Args:
        error: –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    message = f"‚ùå –û—à–∏–±–∫–∞"
    if context:
        message += f" –≤ {context}"
    message += f": {str(error)}"
    
    logger.error(message)