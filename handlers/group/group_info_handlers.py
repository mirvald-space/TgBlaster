from loguru import logger
import sqlite3
import os

from telethon import Button, TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import Channel, Chat
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetFullChatRequest

from config import callback_query, API_ID, API_HASH, broadcast_all_text, scheduler, Query, bot, conn
from utils.telegram import gid_key, broadcast_status_emoji, get_entity_by_id


@bot.on(Query(data=lambda data: data.decode().startswith("listOfgroups_")))
async def handle_groups_list(event: callback_query) -> None:
    user_id = int(event.data.decode().split("_")[1])
    cursor = conn.cursor()
    row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        dialogs = cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))
        buttons = []
        
        for dialog in dialogs:
            group_id, group_username = dialog
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –≥—Ä—É–ø–ø—ã
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ group_username —á–∏—Å–ª–æ–º (ID –≥—Ä—É–ø–ø—ã) –∏–ª–∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if group_username.startswith('@'):
                        # –≠—Ç–æ username –≥—Ä—É–ø–ø—ã
                        entity = await client.get_entity(group_username)
                    else:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ ID
                        try:
                            group_id_int = int(group_username)
                            entity = await get_entity_by_id(client, group_id_int)
                            if not entity:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                display_name = f"–ì—Ä—É–ø–ø–∞ —Å ID {group_id}"
                                buttons.append(
                                    [Button.inline(f"{broadcast_status_emoji(user_id, int(group_id))} {display_name}",
                                                f"groupInfo_{user_id}_{gid_key(group_id)}".encode())]
                                )
                                continue
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                            entity = await client.get_entity(group_username)
                except Exception as entity_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ ID –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}: {entity_error}")
                    buttons.append(
                        [Button.inline(f"{broadcast_status_emoji(user_id, int(group_id))} {group_username}",
                                    f"groupInfo_{user_id}_{gid_key(group_id)}".encode())]
                    )
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                group_title = getattr(entity, 'title', group_username)
                buttons.append(
                    [Button.inline(f"{broadcast_status_emoji(user_id, int(group_id))} {group_title}",
                                f"groupInfo_{user_id}_{gid_key(group_id)}".encode())]
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
                buttons.append(
                    [Button.inline(f"{broadcast_status_emoji(user_id, int(group_id))} {group_username}",
                                f"groupInfo_{user_id}_{gid_key(group_id)}".encode())]
                )
        
        cursor.close()
        if not buttons:
            await event.respond("–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø.")
            return

        await event.respond("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ:", buttons=buttons)
    finally:
        await client.disconnect()


# ---------- –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã ----------
@bot.on(Query(data=lambda d: d.decode().startswith("groupInfo_")))
async def group_info(event: callback_query) -> None:
    data = event.data.decode()
    user_id, group_id = map(int, data.split("_")[1:])
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
    session_row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    if not session_row:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        cursor.close()
        return
        
    session_string = session_row[0]
    session = StringSession(session_string)
    client = TelegramClient(session, API_ID, API_HASH)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥—Ä—É–ø–ø—ã
    group_row = cursor.execute("SELECT group_username FROM groups WHERE user_id = ? AND group_id = ?", 
                             (user_id, group_id)).fetchone()
    if not group_row:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞.")
        cursor.close()
        return
        
    group_username = group_row[0]
    
    try:
        await client.connect()
        
        try:
            ent = await client.get_entity(group_row[0])
        except Exception as entity_error:
            if "Cannot find any entity corresponding to" in str(entity_error):
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º username –≤ ID, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    try:
                        group_id_int = int(group_row[0])
                        ent = await get_entity_by_id(client, group_id_int)
                        if not ent:
                            await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                            await client.disconnect()
                            cursor.close()
                            return
                    except ValueError:
                        # –ï—Å–ª–∏ username –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                        await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                        await client.disconnect()
                        cursor.close()
                        return
                except Exception as alt_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ Entity: {alt_error}")
                    await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                    await client.disconnect()
                    cursor.close()
                    return
            else:
                await event.respond(f"‚ö† –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {group_username}.")
                await client.disconnect()
                cursor.close()
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        broadcast_row = cursor.execute("""
            SELECT broadcast_text, interval_minutes, is_active, photo_url 
            FROM broadcasts 
            WHERE user_id = ? AND group_id = ?
        """, (user_id, gid_key(group_id))).fetchone()
        
        broadcast_text = broadcast_row[0] if broadcast_row and broadcast_row[0] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        interval = f"{broadcast_row[1]} –º–∏–Ω." if broadcast_row and broadcast_row[1] else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        status = broadcast_status_emoji(user_id, group_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo_url = broadcast_row[3] if broadcast_row and len(broadcast_row) > 3 and broadcast_row[3] else None
        photo_info = f"–§–æ—Ç–æ: {os.path.basename(photo_url)}" if photo_url else "–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group_title = getattr(ent, 'title', group_username)
        group_username_display = f"@{ent.username}" if hasattr(ent, 'username') and ent.username else "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None
        members_count = getattr(ent, 'participants_count', None)
        if members_count is None:
            try:
                # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if isinstance(ent, Channel):
                    full_channel = await client(GetFullChannelRequest(ent))
                    members_count = getattr(full_channel.full_chat, 'participants_count', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                elif isinstance(ent, Chat):
                    full_chat = await client(GetFullChatRequest(ent.id))
                    members_count = getattr(full_chat.full_chat, 'participants_count', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                else:
                    members_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                members_count = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        if isinstance(ent, Channel):
            group_type = "–ö–∞–Ω–∞–ª" if ent.broadcast else "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"
        elif isinstance(ent, Chat):
            group_type = "–ì—Ä—É–ø–ø–∞"
        else:
            group_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        
        info_text = f"""
üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ**

üë• **–ù–∞–∑–≤–∞–Ω–∏–µ**: {group_title}
üîñ **–Æ–∑–µ—Ä–Ω–µ–π–º**: {group_username_display}
üë§ **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤**: {members_count}
üìù **–¢–∏–ø**: {group_type}
üÜî **ID**: {group_id}

üì¨ **–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏**: {status}
‚è± **–ò–Ω—Ç–µ—Ä–≤–∞–ª**: {interval}
üìù **–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏**: 
{broadcast_text[:100] + '...' if len(broadcast_text) > 100 else broadcast_text}
üñº **{photo_info}**
"""
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π
        buttons = [
            [Button.inline(f"üìù –¢–µ–∫—Å—Ç –∏ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏", f"BroadcastTextInterval_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", f"StartResumeBroadcast_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", f"StopAccountBroadcast_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", f"DeleteGroup_{user_id}_{group_id}".encode())],
            [Button.inline(f"‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø", f"groups_{user_id}".encode())]
        ]
        
        await event.respond(info_text, buttons=buttons)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(e)}")
    finally:
        await client.disconnect()
        cursor.close()
