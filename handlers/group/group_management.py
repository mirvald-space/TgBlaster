from loguru import logger
from typing import List, Optional, Union

from telethon import Button, TelegramClient
from telethon.sessions import StringSession
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Channel, Chat, DialogFilter

from config import callback_query, API_ID, API_HASH, Query, bot, conn, processed_callbacks
from utils.telegram import broadcast_status_emoji, gid_key, get_entity_by_id


@bot.on(Query(data=lambda d: d.decode().startswith("account_")))
async def account_menu(event: callback_query) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ —Å–ø–∏—Å–∫–µ –≥—Ä—É–ø–ø –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞."""
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
    
    data = event.data.decode()
    parts = data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    if len(parts) < 2:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ "info" –≤ callback data
    if parts[1] == "info":
        # –§–æ—Ä–º–∞—Ç account_info_user_id
        if len(parts) < 3:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        try:
            user_id = int(parts[2])
        except ValueError:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
    else:
        # –§–æ—Ä–º–∞—Ç account_user_id
        try:
            user_id = int(parts[1])
        except ValueError:
            await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    buttons = [
        [Button.inline("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", f"groups_{user_id}".encode())],
        [Button.inline("üì¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã", f"broadcastAll_{user_id}".encode())],
        [Button.inline("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É", f"StopBroadcastAll_{user_id}".encode())],
        [Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", b"my_accounts")]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    await event.respond(f"üì± **–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", buttons=buttons)


@bot.on(Query(data=b"my_groups"))
async def my_groups(event: callback_query) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
    
    cursor = conn.cursor()
    cursor.execute("SELECT group_id, group_username FROM groups")
    groups = cursor.fetchall()
    cursor.close()
    message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø."
    buttons = []
    if groups:
        message = "üìë **–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:**\n"
        buttons.append([Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã", b"add_all_accounts_to_groups")])
        buttons.append([Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", b"delete_group")])
        for group in groups:
            message += f"{group[1]}\n"
    await event.respond(message, buttons=buttons)


@bot.on(Query(data=b"add_all_accounts_to_groups"))
async def add_all_accounts_to_groups(event: callback_query) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
    
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, session_string FROM sessions")
    accounts = cursor.fetchall()

    cursor.execute("SELECT group_id, group_username FROM groups")
    groups = cursor.fetchall()
    if not accounts:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return

    if not groups:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
        return

    for account in accounts:
        session = StringSession(account[1])
        client = TelegramClient(session, API_ID, API_HASH)
        await client.connect()
        try:
            for group in groups:
                try:
                    await client(JoinChannelRequest(group[1]))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ {e}")
                cursor.execute("""INSERT OR IGNORE INTO groups 
                                        (user_id, group_id, group_username) 
                                        VALUES (?, ?, ?)""", (account[0], group[0], group[1]))
                logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—É ({account[0], group[0], group[1]})")
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        finally:
            await client.disconnect()
    group_list = "\n".join([f"üìå {group[1]}" for group in groups])
    await event.respond(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n{group_list}")
    conn.commit()
    cursor.close()


@bot.on(Query(data=lambda event: event.decode().startswith("add_all_groups_")))
async def add_all_groups_to_account(event: callback_query) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
    
    data: str = event.data.decode()
    user_id = int(data.split("_")[3])
    cursor = conn.cursor()
    cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id, ))
    accounts = cursor.fetchall()
    if not accounts:
        await event.respond("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return
    msg = ["‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"]
    num = 1
    session = StringSession(accounts[0][0])
    client = TelegramClient(session, API_ID, API_HASH)
    await client.connect()
    cursor.execute("DELETE FROM groups WHERE user_id = ?", (user_id,))
    conn.commit()
    
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
    added_group_ids = set()
    added_group_names = set()  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
    all_dialogs = await client.get_dialogs()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö: —Å–Ω–∞—á–∞–ª–∞ –∫–∞–Ω–∞–ª—ã (—Å username), –ø–æ—Ç–æ–º –≥—Ä—É–ø–ø—ã, –ø–æ—Ç–æ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    sorted_dialogs = sorted(all_dialogs, key=lambda d: (
        not isinstance(d.entity, Channel),  # –°–Ω–∞—á–∞–ª–∞ –∫–∞–Ω–∞–ª—ã
        not (isinstance(d.entity, Channel) and d.entity.username),  # –ü–æ—Ç–æ–º —Å username
        d.name  # –ü–æ—Ç–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    ))
    
    for group in sorted_dialogs:
        ent = group.entity
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É: {group.name}, —Ç–∏–ø: {type(ent)}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
        if not isinstance(ent, (Channel, Chat)):
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏–ª–∏ –±–æ—Ç
        if hasattr(ent, 'bot') and ent.bot:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞–Ω–∞–ª-–≤–∏—Ç—Ä–∏–Ω–∞ (–Ω–µ –º–µ–≥–∞–≥—Ä—É–ø–ø–∞)
        if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
            continue
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–ø–æ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é)
        if ent.id in added_group_ids or group.name in added_group_names:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {group.name}")
            continue
            
        # –î–æ–±–∞–≤–ª—è–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫ –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        added_group_ids.add(ent.id)
        added_group_names.add(group.name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º username –∏–ª–∏ ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if isinstance(ent, Channel) and ent.username:
            group_username = f"@{ent.username}"
            cursor.execute(f"""INSERT INTO groups 
                            (group_id, group_username, user_id) 
                            VALUES (?, ?, ?)""", (ent.id, group_username, user_id))
            msg.append(f"‚Ññ{num} **{group.name}** - {group_username}")
        else:
            # –î–ª—è –≥—Ä—É–ø–ø –±–µ–∑ username –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø
            group_id_str = str(ent.id)
            cursor.execute(f"""INSERT INTO groups 
                            (group_id, group_username, user_id) 
                            VALUES (?, ?, ?)""", (ent.id, group_id_str, user_id))
            msg.append(f"‚Ññ{num} **{group.name}** (–ø—Ä–∏–≤–∞—Ç–Ω–∞ –≥—Ä—É–ø–∞, ID: {group_id_str})")
            
        conn.commit()
        num += 1
        
    conn.commit()
    cursor.close()
    await client.disconnect()
    await event.respond("\n".join(msg))


@bot.on(Query(data=lambda d: d.decode().startswith("groups_")))
async def groups_list(event: callback_query) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
    
    data = event.data.decode()
    user_id = int(data.split("_")[1])
    
    cursor = conn.cursor()
    session_row = cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)).fetchone()
    
    if not session_row:
        await event.respond("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
        cursor.close()
        return
        
    session_string = session_row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    
    try:
        await client.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –ë–î
        cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))
        groups = cursor.fetchall()
        
        if not groups:
            await event.respond("üìã –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø. –î–æ–±–∞–≤—å—Ç–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            await client.disconnect()
            cursor.close()
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        group_list = []
        
        for group_id, group_username in groups:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –≥—Ä—É–ø–ø—ã
                try:
                    ent = await client.get_entity(group_username)
                except Exception as entity_error:
                    if "Cannot find any entity corresponding to" in str(entity_error):
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º username –≤ ID, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                            try:
                                group_id_int = int(group_username)
                                ent = await get_entity_by_id(client, group_id_int)
                                if not ent:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}")
                                    continue
                            except ValueError:
                                # –ï—Å–ª–∏ username –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}")
                                continue
                        except Exception as alt_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ Entity: {alt_error}")
                            continue
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}: {entity_error}")
                        continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
                status = broadcast_status_emoji(user_id, group_id)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                group_name = getattr(ent, 'title', group_username)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º gid_key –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –≥—Ä—É–ø–ø—ã
                group_list.append((gid_key(group_id), group_name, status))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_username}: {e}")
                continue
                
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
        if group_list:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            buttons = []
            for group_id, group_name, status in group_list:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–æ–ø–∫–∏
                data = f"groupInfo_{user_id}_{group_id}".encode()
                buttons.append([Button.inline(f"{status} {group_name}", data)])
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            buttons.append([Button.inline("‚óÄÔ∏è –ù–∞–∑–∞–¥", f"account_{user_id}".encode())])
            
            await event.respond("üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", buttons=buttons)
        else:
            await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {str(e)}")
    finally:
        await client.disconnect()
        cursor.close()
