from loguru import logger

from telethon import TelegramClient
from telethon.errors import FloodWaitError, SessionPasswordNeededError, PhoneCodeExpiredError, PhoneCodeInvalidError
from telethon.sessions import StringSession
from telethon.tl.functions.auth import SendCodeRequest, SignInRequest

from config import (callback_query, callback_message, phone_waiting, code_waiting, password_waiting, user_clients,
                    API_ID,
                    API_HASH, broadcast_all_state, user_states, New_Message, Query, bot, conn)


@bot.on(Query(data=b"add_account"))
async def add_account(event: callback_query) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç
    """
    logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞")
    user_id: int = event.sender_id
    phone_waiting[user_id] = True
    await event.respond("üì≤ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `+xxxxxxxxxxx`")


@bot.on(New_Message(func=lambda e: e.sender_id in phone_waiting and e.text.startswith("+") and e.text[1:].isdigit()))
async def send_code_for_phone(event: callback_message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    """
    user_id: int = event.sender_id
    phone_number: str = event.text.strip()
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é {user_id} –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω {phone_number} –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    user_clients[user_id] = TelegramClient(StringSession(), API_ID, API_HASH)
    await user_clients[user_id].connect()

    await event.respond("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")

    try:
        await user_clients[user_id].send_code_request(phone_number)
        code_waiting[user_id] = phone_number
        del phone_waiting[user_id]
        await event.respond("‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5-10 –º–∏–Ω—É—Ç\nüì± –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ:")
        logger.info(f"–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        if isinstance(e, (SendCodeRequest, FloodWaitError)):
            sec_time = int(str(e).split()[3])
            message = (f"‚ö† –¢–µ–ª–µ–≥—Ä–∞–º–º –∑–∞–±–∞–Ω–∏–ª –∑–∞ –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã. "
                       f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {(a := sec_time // 3600)} –ß–∞—Å–æ–≤ {(b := ((sec_time - a * 3600) // 60))}"
                       f" –ú–∏–Ω—É—Ç {sec_time - a * 3600 - b * 60} –°–µ–∫—É–Ω–¥")
            await event.respond(message)
            logger.error(message)
        else:
            phone_waiting.pop(user_id, None)
            user_clients.pop(user_id, None)
            logger.error(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            await event.respond(f"‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")


@bot.on(New_Message(
    func=lambda e: e.sender_id in code_waiting and e.text.isdigit() and e.sender_id not in broadcast_all_state))
async def get_code(event: callback_message) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    code = event.text.strip()
    user_id = event.sender_id
    phone_number = code_waiting[user_id]
    cursor = conn.cursor()
    try:
        await user_clients[user_id].sign_in(phone_number, code)
        session_string = user_clients[user_id].session.save()
        me = await user_clients[user_id].get_me()
        if not cursor.execute("SELECT session_string FROM sessions WHERE user_id = ?", (me.id, )).fetchall():
            cursor.execute("INSERT INTO sessions (user_id, session_string) VALUES (?, ?)", (me.id, session_string))
            conn.commit()
            await event.respond("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await event.respond("‚ùå –¢–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –µ—Å—Ç—å")
        del code_waiting[user_id]
        del user_clients[user_id]
    except SessionPasswordNeededError:
        password_waiting[user_id] = {"waiting": True, "last_message_id": event.message.id}
        await event.respond("‚ö† –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å:")
    except PhoneCodeExpiredError as e:
        logger.error(f"–ö–æ–¥ –∏—Å—Ç–µ–∫: {e}")
        del code_waiting[user_id]
        user_clients.pop(user_id, None)
        await event.respond(f"‚è∞ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫!\n\n"
                          f"–ö–æ–¥—ã Telegram –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ 5-10 –º–∏–Ω—É—Ç.\n"
                          f"–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥.")
    except PhoneCodeInvalidError as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥: {e}")
        await event.respond(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
                          f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤ SMS –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑.\n"
                          f"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç' –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞.")
    except Exception as e:
        del code_waiting[user_id]
        user_clients.pop(user_id, None)
        logger.error(f"–û—à–∏–±–∫–∞: {e}, –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        await event.respond(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")
    finally:
        cursor.close()


@bot.on(New_Message(func=lambda
        e: e.sender_id in password_waiting and e.sender_id not in user_states and e.sender_id not in broadcast_all_state))
async def get_password(event: callback_message) -> None:
    user_id = event.sender_id
    if password_waiting[user_id]["waiting"] and event.message.id > password_waiting[user_id]["last_message_id"]:
        password = event.text.strip()
        cursor = conn.cursor()
        try:
            await user_clients[user_id].sign_in(password=password)
            me = await user_clients[user_id].get_me()
            session_string = user_clients[user_id].session.save()

            cursor.execute("INSERT INTO sessions (user_id, session_string) VALUES (?, ?)", (me.id, session_string))
            conn.commit()

            del password_waiting[user_id]
            del user_clients[user_id]
            await event.respond("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            await event.respond(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'.")
        finally:
            cursor.close()
