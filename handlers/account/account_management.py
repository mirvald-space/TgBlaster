from loguru import logger

from telethon import Button, TelegramClient
from telethon.sessions import StringSession

from config import callback_query, API_ID, API_HASH, Query, bot, conn, processed_callbacks
from utils.telegram import get_active_broadcast_groups, broadcast_status_emoji, get_entity_by_id


@bot.on(Query(data=b"my_accounts"))
async def my_accounts(event: callback_query) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    """
    try:
        cursor = conn.cursor()
        buttons = []
        accounts_found = False

        for user_id, session_string in cursor.execute("SELECT user_id, session_string FROM sessions"):
            accounts_found = True
            client = None
            try:
                client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
                await client.connect()
                me = await client.get_me()
                username = me.first_name if me.first_name else "–ë–µ–∑ –Ω–∏–∫–∞"
                buttons.append([Button.inline(f"üë§ {username}", f"account_info_{user_id}")])
            except Exception:
                buttons.append([Button.inline("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞", f"error_{user_id}")])
            finally:
                if client:
                    await client.disconnect()

        cursor.close()

        if not accounts_found:
            await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return

        await event.respond("üì± **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:**", buttons=buttons)

    except Exception as e:
        logger.error(f"Error in my_accounts: {e}")
        await event.respond("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")


@bot.on(Query(data=lambda data: data.decode().startswith("account_info_")))
async def handle_account_button(event: callback_query) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ callback
    callback_id = f"{event.sender_id}:{event.query.msg_id}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç callback
    if callback_id in processed_callbacks:
        # –≠—Ç–æ—Ç callback —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –±–µ–∑ –æ—Ç–≤–µ—Ç–∞
        return
        
    # –û—Ç–º–µ—á–∞–µ–º callback –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    processed_callbacks[callback_id] = True
        
    user_id = int(event.data.decode().split("_")[2])
    cursor = conn.cursor()
    row = cursor.execute(
        "SELECT session_string FROM sessions WHERE user_id = ?", (user_id,)
    ).fetchone()
    if not row:
        await event.respond("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç.")
        return

    session_string = row[0]
    client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
    await client.connect()
    try:
        me = await client.get_me()
        username = me.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        phone = me.phone or "–ù–µ —É–∫–∞–∑–∞–Ω"
        groups = cursor.execute("SELECT group_id, group_username FROM groups WHERE user_id = ?", (user_id,))

        active_gids = get_active_broadcast_groups(user_id)
        lines = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        for group_id, group_username in groups:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å entity –≥—Ä—É–ø–ø—ã
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ group_username —á–∏—Å–ª–æ–º (ID –≥—Ä—É–ø–ø—ã) –∏–ª–∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if group_username.startswith('@'):
                        # –≠—Ç–æ username –≥—Ä—É–ø–ø—ã
                        entity = await client.get_entity(group_username)
                    else:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ ID
                        try:
                            group_id_int = int(group_username)
                            entity = await get_entity_by_id(client, group_id_int)
                            if not entity:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                display_name = f"–ì—Ä—É–ø–ø–∞ —Å ID {group_id}"
                                lines.append(f"{broadcast_status_emoji(user_id, int(group_id))} {display_name}")
                                continue
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                            entity = await client.get_entity(group_username)
                except Exception as entity_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ ID –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ entity –¥–ª—è –≥—Ä—É–ø–ø—ã {group_username}: {entity_error}")
                    lines.append(f"{broadcast_status_emoji(user_id, int(group_id))} {group_username}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
                group_title = getattr(entity, 'title', group_username)
                lines.append(f"{broadcast_status_emoji(user_id, int(group_id))} {group_title}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
                lines.append(f"{broadcast_status_emoji(user_id, int(group_id))} {group_username}")
        
        group_list = "\n".join(lines)
        if not group_list:
            group_list = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≥—Ä—É–ø–ø."

        mass_active = "üü¢ –í–ö–õ" if active_gids else "üî¥ –í–´–ö–õ"
        buttons = [
            [
                Button.inline("üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø", f"listOfgroups_{user_id}")
            ],
            [Button.inline("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤–æ –≤—Å–µ —á–∞—Ç—ã", f"broadcastAll_{user_id}"),
             Button.inline("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—â—É—é —Ä–∞—Å—Å—ã–ª–∫—É", f"StopBroadcastAll_{user_id}")],
            [Button.inline("‚úî –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö", f"add_all_groups_{user_id}", )],
            [Button.inline("‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç", f"delete_account_{user_id}")]
        ]

        await event.respond(
            f"üì¢ **–ú–µ–Ω—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}:**\n"
            f"üöÄ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:** {mass_active}\n\n"
            f"üìå **–ò–º—è:** {username}\n"
            f"üìû **–ù–æ–º–µ—Ä:** `+{phone}`\n\n"
            f"üìù **–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:**\n{group_list}",
            buttons=buttons
        )
    finally:
        await client.disconnect()
        cursor.close()
