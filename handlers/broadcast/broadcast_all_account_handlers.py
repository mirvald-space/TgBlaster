import asyncio
import datetime
from loguru import logger
from typing import Union, Optional

from apscheduler.triggers.interval import IntervalTrigger
from telethon import Button, TelegramClient
from telethon.errors import ChatWriteForbiddenError, ChatAdminRequiredError, FloodWaitError, SlowModeWaitError
from telethon.sessions import StringSession
from telethon.tl.types import Channel, Chat

from config import callback_query, callback_message, API_ID, API_HASH, scheduler, Query, bot, conn, \
    New_Message, broadcast_all_state_account
from utils.telegram import gid_key, create_broadcast_data, get_active_broadcast_groups, get_entity_by_id
from utils.logging import log_message_event, log_user_action


@bot.on(Query(data=lambda d: d.decode().startswith("broadcast_All_account")))
async def broadcast_all_menu(event: callback_query) -> None:
    keyboard = [
        [Button.inline("‚è≤Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤–æ –≤—Å–µ –≥—Ä—É–ø–ø—ã", f"same_IntervalAll_account")],
        [Button.inline("üé≤ –†–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (25-35)", f"diff_IntervalAll_account")]
    ]
    await event.respond("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏:", buttons=keyboard)


# ---------- –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(Query(data=lambda d: d.decode().startswith("same_IntervalAll_account")))
async def same_interval_start(event: callback_query) -> None:
    admin_id = event.sender_id
    broadcast_all_state_account[admin_id] = {"mode": "same", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è **–≤—Å–µ—Ö** –≥—Ä—É–ø–ø —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")


# ---------- —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ----------
@bot.on(Query(data=lambda d: d.decode().startswith("diff_IntervalAll_account")))
async def diff_interval_start(event: callback_query) -> None:
    admin_id = event.sender_id
    broadcast_all_state_account[admin_id] = {"mode": "diff", "step": "text"}
    await event.respond("üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ—Ç–æ–º —Å–ø—Ä–æ—à—É –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:")


# ---------- –º–∞—Å—Ç–µ—Ä-–¥–∏–∞–ª–æ–≥ (—Ç–µ–∫—Å—Ç ‚Üí –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã) ----------
@bot.on(New_Message(func=lambda e: e.sender_id in broadcast_all_state_account))
async def broadcast_all_dialog(event: callback_message) -> None:
    st = broadcast_all_state_account[event.sender_id]
    log_message_event(event, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º")
    # —à–∞–≥ 1 ‚Äî –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç
    if st["step"] == "text":
        st["text"] = event.text
        if st["mode"] == "same":
            st["step"] = "interval"
            await event.respond("‚è≤Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω—É—Ç—ã, –æ–¥–Ω–æ —á–∏—Å–ª–æ):")
        else:
            st["step"] = "min"
            await event.respond("üî¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if st["mode"] == "same" and st["step"] == "interval":
        try:
            min_time = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if min_time <= 0:
            await event.respond("‚ö† –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ
        st["min_time"] = min_time
        st["step"] = "photo_choice"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        buttons = [
            [Button.inline("‚úÖ –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", b"photo_yes_all_account")],
            [Button.inline("üì∏ –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", b"photo_only_all_account")],
            [Button.inline("‚ùå –ù–µ—Ç, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", b"photo_no_all_account")]
        ]
        
        await event.respond("üì∏ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?", buttons=buttons)
        return
        
    # —à–∞–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–î–∞" –∏–ª–∏ "–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    if st["step"] == "photo" or st["step"] == "photo_only":
        if event.photo:
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                photo = await event.download_media()
                st["photo_url"] = photo
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ñ–æ—Ç–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                if st["mode"] == "same":
                    # –†–µ–∂–∏–º —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                    await schedule_all_accounts_broadcast(st["text"], st["min_time"], None, photo)
                    message_type = "—Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ" if st["step"] == "photo_only" else "—Å —Ñ–æ—Ç–æ"
                    await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: –∫–∞–∂–¥—ã–µ {st['min_time']} –º–∏–Ω {message_type}.")
                else:
                    # –†–µ–∂–∏–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
                    await schedule_all_accounts_broadcast(st["text"], st["min"], st["max_m"], photo)
                    message_type = "—Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ" if st["step"] == "photo_only" else "—Å —Ñ–æ—Ç–æ"
                    await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: —Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {st['min']}-{st['max_m']} –º–∏–Ω {message_type}.")
                
                broadcast_all_state_account.pop(event.sender_id, None)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
                await event.respond("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ.")
        else:
            await event.respond("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ (/start).")
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 2 (min)
    if st["mode"] == "diff" and st["step"] == "min":
        try:
            st["min"] = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if st["min"] <= 0:
            await event.respond("‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return
        st["step"] = "max"
        await event.respond("üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω):")
        return

    # —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî —à–∞–≥ 3 (max)
    if st["mode"] == "diff" and st["step"] == "max":
        try:
            max_m = int(event.text)
        except ValueError:
            await event.respond(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞–≤ /start")
            return
        if max_m <= st["min"]:
            await event.respond("‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ç–æ
        st["max_m"] = max_m
        st["step"] = "photo_choice"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        buttons = [
            [Button.inline("‚úÖ –î–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", b"photo_yes_all_account")],
            [Button.inline("üì∏ –¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", b"photo_only_all_account")],
            [Button.inline("‚ùå –ù–µ—Ç, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", b"photo_no_all_account")]
        ]
        
        await event.respond("üì∏ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?", buttons=buttons)
        return


@bot.on(Query(data=lambda d: d.decode() == "photo_yes_all_account"))
async def photo_yes_all_handler(event: callback_query) -> None:
    user_id = event.sender_id
    
    if user_id not in broadcast_all_state_account:
        await event.respond("‚ö† –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
        
    st = broadcast_all_state_account[user_id]
    st["step"] = "photo"
    
    await event.respond("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é:")


@bot.on(Query(data=lambda d: d.decode() == "photo_only_all_account"))
async def photo_only_all_account_handler(event: callback_query) -> None:
    user_id = event.sender_id
    
    if user_id not in broadcast_all_state_account:
        await event.respond("‚ö† –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
        
    st = broadcast_all_state_account[user_id]
    st["step"] = "photo_only"
    st["text"] = ""  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
    
    await event.respond("üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞:")


@bot.on(Query(data=lambda d: d.decode() == "photo_no_all_account"))
async def photo_no_all_handler(event: callback_query) -> None:
    user_id = event.sender_id
    
    if user_id not in broadcast_all_state_account:
        await event.respond("‚ö† –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
        
    st = broadcast_all_state_account[user_id]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ —Ñ–æ—Ç–æ
    if st["mode"] == "same":
        await schedule_all_accounts_broadcast(st["text"], st["min_time"], None)
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: –∫–∞–∂–¥—ã–µ {st['min_time']} –º–∏–Ω.")
    else:
        await schedule_all_accounts_broadcast(st["text"], st["min"], st["max_m"])
        await event.respond(f"‚úÖ –ó–∞–ø—É—Å—Ç–∏–ª: —Å–ª—É—á–∞–π–Ω–æ –∫–∞–∂–¥—ã–µ {st['min']}-{st['max_m']} –º–∏–Ω.")
    
    broadcast_all_state_account.pop(user_id, None)


@bot.on(Query(data=lambda data: data.decode() == "Stop_Broadcast_All_account"))
async def stop_broadcast_all(event: callback_query) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –≥—Ä—É–ø–ø"""
    msg_lines = ["‚õî **–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏**:\n\n"]
    processed_accounts = []

    with conn:
        cursor = conn.cursor()
        try:
            sessions = cursor.execute("SELECT user_id, session_string FROM sessions").fetchall()

            for user_id, session_string in sessions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
                if user_id in processed_accounts:
                    continue
                processed_accounts.append(user_id)
                
                async with TelegramClient(StringSession(session_string), API_ID, API_HASH) as client:
                    try:
                        await client.connect()
                        account = await client.get_me()
                        username = getattr(account, 'username', '–±–µ–∑ username')
                        account_name = account.first_name if hasattr(account, 'first_name') and account.first_name else username
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        active_groups = get_active_broadcast_groups(user_id)
                        
                        if not active_groups:
                            continue
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                        account_msg = [f"**–ê–∫–∫–∞—É–Ω—Ç {account_name}**:\n"]
                        has_stopped_jobs = False
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤–º–µ—Å—Ç–æ ID
                        group_info = {}
                        groups_data = cursor.execute("""
                            SELECT group_id, group_username FROM groups WHERE user_id = ?
                        """, (user_id,)).fetchall()
                        
                        for g_id, g_username in groups_data:
                            group_info[g_id] = g_username
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É
                        for group_id in active_groups:
                            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                            try:
                                group_username = group_info.get(group_id, str(group_id))
                                
                                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –≥—Ä—É–ø–ø—ã
                                try:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ username –∏–ª–∏ ID
                                    if group_username.startswith('@'):
                                        # –≠—Ç–æ username –≥—Ä—É–ø–ø—ã
                                        group_entity = await client.get_entity(group_username)
                                    else:
                                        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ entity –∑–∞ ID
                                        try:
                                            group_id_int = int(group_username)
                                            group_entity = await get_entity_by_id(client, group_id_int)
                                            if not group_entity:
                                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                                display_name = f"–ì—Ä—É–ø–∞ –∑ ID {group_id}"
                                                
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                                                job_stopped = False
                                                job_id_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"
                                                job_id_solo = f"broadcast_{user_id}_{gid_key(group_id)}"
                                                
                                                if scheduler.get_job(job_id_all):
                                                    scheduler.remove_job(job_id_all)
                                                    job_stopped = True
                                                
                                                if scheduler.get_job(job_id_solo):
                                                    scheduler.remove_job(job_id_solo)
                                                    job_stopped = True
                                                
                                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                                cursor.execute(
                                                    "UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                                    (False, user_id, gid_key(group_id)))
                                                
                                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                                                if job_stopped:
                                                    account_msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ {display_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                                                    has_stopped_jobs = True
                                                
                                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                                                continue
                                        except ValueError:
                                            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                                            group_entity = await client.get_entity(group_username)
                                except Exception as entity_error:
                                    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ entity, —Å–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥
                                    if "Cannot find any entity corresponding to" in str(entity_error):
                                        try:
                                            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ entity –∑–∞ ID
                                            try:
                                                group_id_int = int(group_username) if group_username.isdigit() else group_id
                                                group_entity = await get_entity_by_id(client, group_id_int)
                                                if not group_entity:
                                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                                    display_name = f"–ì—Ä—É–ø–∞ –∑ ID {group_id}"
                                                    
                                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                                                    job_stopped = False
                                                    job_id_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"
                                                    job_id_solo = f"broadcast_{user_id}_{gid_key(group_id)}"
                                                    
                                                    if scheduler.get_job(job_id_all):
                                                        scheduler.remove_job(job_id_all)
                                                        job_stopped = True
                                                    
                                                    if scheduler.get_job(job_id_solo):
                                                        scheduler.remove_job(job_id_solo)
                                                        job_stopped = True
                                                    
                                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                                    cursor.execute(
                                                        "UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                                        (False, user_id, gid_key(group_id)))
                                                    
                                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                                                    if job_stopped:
                                                        account_msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ {display_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                                                        has_stopped_jobs = True
                                                    
                                                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                                                    continue
                                            except ValueError:
                                                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ —á–∏—Å–ª–æ, –ø—Ä–æ—Å—Ç–æ –∑—É–ø–∏–Ω—è—î–º–æ –∑–∞–¥–∞—á—ñ
                                                display_name = f"–ì—Ä—É–ø–∞ –∑ ID {group_id}"
                                                
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                                                job_stopped = False
                                                job_id_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"
                                                job_id_solo = f"broadcast_{user_id}_{gid_key(group_id)}"
                                                
                                                if scheduler.get_job(job_id_all):
                                                    scheduler.remove_job(job_id_all)
                                                    job_stopped = True
                                                
                                                if scheduler.get_job(job_id_solo):
                                                    scheduler.remove_job(job_id_solo)
                                                    job_stopped = True
                                                
                                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                                cursor.execute(
                                                    "UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                                    (False, user_id, gid_key(group_id)))
                                                
                                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                                                if job_stopped:
                                                    account_msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ {display_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                                                    has_stopped_jobs = True
                                                
                                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                                                continue
                                        except Exception as alt_error:
                                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ Entity: {alt_error}")
                                            
                                            # –ï—Å–ª–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
                                            display_name = f"–ì—Ä—É–ø–∞ –∑ ID {group_id}"
                                            
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                                            job_stopped = False
                                            job_id_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"
                                            job_id_solo = f"broadcast_{user_id}_{gid_key(group_id)}"
                                            
                                            if scheduler.get_job(job_id_all):
                                                scheduler.remove_job(job_id_all)
                                                job_stopped = True
                                            
                                            if scheduler.get_job(job_id_solo):
                                                scheduler.remove_job(job_id_solo)
                                                job_stopped = True
                                            
                                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                            cursor.execute(
                                                "UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                                (False, user_id, gid_key(group_id)))
                                            
                                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                                            if job_stopped:
                                                account_msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ {display_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                                                has_stopped_jobs = True
                                            
                                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                                            continue
                                    else:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(entity_error)}")
                                        continue
                                
                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã-–≤–∏—Ç—Ä–∏–Ω—ã
                                if isinstance(group_entity, Channel) and group_entity.broadcast and not group_entity.megagroup:
                                    logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–∞–Ω–∞–ª {group_username}")
                                    continue
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                display_name = group_entity.title if hasattr(group_entity, 'title') else group_username
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
                                job_stopped = False
                                job_id_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"
                                job_id_solo = f"broadcast_{user_id}_{gid_key(group_id)}"
                                
                                if scheduler.get_job(job_id_all):
                                    scheduler.remove_job(job_id_all)
                                    job_stopped = True
                                
                                if scheduler.get_job(job_id_solo):
                                    scheduler.remove_job(job_id_solo)
                                    job_stopped = True
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                cursor.execute(
                                    "UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                    (False, user_id, gid_key(group_id)))
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                                if job_stopped:
                                    account_msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É **{display_name}** –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                                    has_stopped_jobs = True
                                
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_id}: {str(e)}")
                                
                                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
                                try:
                                    job_id_all = f"broadcastALL_{user_id}_{gid_key(group_id)}"
                                    job_id_solo = f"broadcast_{user_id}_{gid_key(group_id)}"
                                    job_stopped = False
                                    
                                    if scheduler.get_job(job_id_all):
                                        scheduler.remove_job(job_id_all)
                                        job_stopped = True
                                    
                                    if scheduler.get_job(job_id_solo):
                                        scheduler.remove_job(job_id_solo)
                                        job_stopped = True
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                                    cursor.execute(
                                        "UPDATE broadcasts SET is_active = ? WHERE user_id = ? AND group_id = ?",
                                        (False, user_id, gid_key(group_id)))
                                    
                                    if job_stopped:
                                        account_msg.append(f"‚õî –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É —Å ID {group_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n")
                                        has_stopped_jobs = True
                                except Exception as stop_error:
                                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {stop_error}")
                                    continue
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏
                        if has_stopped_jobs:
                            msg_lines.extend(account_msg)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_id}: {str(e)}")
                        msg_lines.append(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {user_id}\n")
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–∫–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(msg_lines) == 1:  # –¢–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                msg_lines.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            
            await event.respond("".join(msg_lines))

        finally:
            cursor.close()


async def schedule_all_accounts_broadcast(text: str,
                                          min_m: int,
                                          max_m: Optional[int] = None,
                                          photo_url: Optional[str] = None) -> None:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ broadcastALL_<user>_<gid> —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤,
    –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å."""

    with conn:
        cursor = conn.cursor()
        try:
            users = cursor.execute("SELECT user_id, session_string FROM sessions").fetchall()

            for user_id, session_string in users:
                cursor.execute("""UPDATE broadcasts SET broadcast_text = ? WHERE user_id = ?""",
                               (text, user_id))

                async with TelegramClient(StringSession(session_string), API_ID, API_HASH) as client:
                    await client.connect()

                    groups = cursor.execute("""SELECT group_username, group_id FROM groups 
                                            WHERE user_id = ?""", (user_id,)).fetchall()

                    ok_entities: list[Channel | Chat] = []
                    for group_username, group_id in groups:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ group_username —á–∏—Å–ª–æ–º (ID –≥—Ä—É–ø–ø—ã) –∏–ª–∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            if group_username.startswith('@'):
                                # –≠—Ç–æ username –≥—Ä—É–ø–ø—ã
                                try:
                                    ent = await client.get_entity(group_username)
                                except Exception as e:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ username {group_username}: {e}")
                                    continue
                            else:
                                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ ID
                                try:
                                    group_id_int = int(group_username)
                                    ent = await get_entity_by_id(client, group_id_int)
                                    if not ent:
                                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è ID {group_username}")
                                        continue
                                except ValueError:
                                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                                    try:
                                        ent = await client.get_entity(group_username)
                                    except Exception as e:
                                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è {group_username}: {e}")
                                        continue

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
                            if not isinstance(ent, (Channel, Chat)):
                                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {ent} - –Ω–µ —á–∞—Ç/–∫–∞–Ω–∞–ª")
                                continue

                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã-–≤–∏—Ç—Ä–∏–Ω—ã
                            if isinstance(ent, Channel) and ent.broadcast and not ent.megagroup:
                                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {ent} - –≤–∏—Ç—Ä–∏–Ω–∞-–∫–∞–Ω–∞–ª")
                                continue

                            ok_entities.append(ent)
                        except Exception as error:
                            logger.warning(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {group_username}: {error}")
                            continue

                    if not ok_entities:
                        continue

                    total_entities = len(ok_entities)
                    sec_run = ((max_m - min_m) / total_entities) if max_m else min_m
                    current_time = sec_run

                    for ent in ok_entities:
                        job_id = f"broadcastALL_{user_id}_{gid_key(ent.id)}"
                        interval = ((max_m - min_m) / total_entities) if max_m else min_m

                        create_broadcast_data(user_id, gid_key(ent.id), text, interval, photo_url)

                        if scheduler.get_job(job_id):
                            scheduler.remove_job(job_id)

                        async def send_message(
                                ss: str = session_string,
                                entity: Union[Channel, Chat] = ent,
                                jobs_id: str = job_id,
                                start_text: str = text,
                                start_photo_url: Optional[str] = photo_url,
                                max_retries: int = 10
                        ) -> None:
                            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
                            retry_count = 0

                            while retry_count < max_retries:
                                try:
                                    async with TelegramClient(StringSession(ss), API_ID, API_HASH) as client:
                                        with conn:
                                            cursor = conn.cursor()
                                            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                                            cursor.execute("""SELECT broadcast_text, photo_url FROM broadcasts 
                                                            WHERE group_id = ? AND user_id = ?""",
                                                           (entity.id, user_id))
                                            current_data = cursor.fetchone()
                                            txt = current_data[0] if current_data and current_data[0] else start_text
                                            photo_url_from_db = current_data[1] if current_data and len(current_data) > 1 else None

                                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ
                                            photo_to_send = photo_url_from_db if photo_url_from_db else start_photo_url

                                            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                                            try:
                                                if photo_to_send:
                                                    try:
                                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                                                        await client.send_file(entity, photo_to_send, caption=txt)
                                                        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –≤ {entity.title}")
                                                    except Exception as photo_error:
                                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å —Ñ–æ—Ç–æ: {photo_error}")
                                                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                                                        await client.send_message(entity, txt)
                                                        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ –≤ {entity.title}")
                                                else:
                                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                                    await client.send_message(entity, txt)
                                                    logger.debug(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {entity.title}")
                                            except Exception as entity_error:
                                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–π—Ç–∏ entity
                                                if "Cannot find any entity corresponding to" in str(entity_error):
                                                    logger.info(f"–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –¥–ª—è {entity.id}")
                                                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å entity –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
                                                    new_entity = await get_entity_by_id(client, entity.id)
                                                    if new_entity:
                                                        if photo_to_send:
                                                            try:
                                                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                                                                await client.send_file(new_entity, photo_to_send, caption=txt)
                                                                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤ {new_entity.title}")
                                                            except Exception as alt_photo_error:
                                                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: {alt_photo_error}")
                                                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                                                                await client.send_message(new_entity, txt)
                                                                logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤ {new_entity.title}")
                                                        else:
                                                            await client.send_message(new_entity, txt)
                                                            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤ {new_entity.title}")
                                                        entity = new_entity  # –û–±–Ω–æ–≤–ª—è–µ–º entity –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                                                    else:
                                                        raise entity_error  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                                                else:
                                                    raise entity_error  # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ

                                            cursor.execute("""INSERT INTO send_history 
                                                            (user_id, group_id, group_name, sent_at, message_text) 
                                                            VALUES (?, ?, ?, ?, ?)""",
                                                           (user_id, entity.id, getattr(entity, 'title', ''),
                                                            datetime.datetime.now().isoformat(), txt))
                                except (ChatWriteForbiddenError, ChatAdminRequiredError) as e:
                                    logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –ø–∏—Å–∞—Ç—å –≤ {entity.title}: {e}")
                                    break
                                except (FloodWaitError, SlowModeWaitError) as e:
                                    wait_time = e.seconds
                                    logger.warning(f"{type(e).__name__}: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫.")
                                    await asyncio.sleep(wait_time + 10)
                                    retry_count += 1
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {entity.title}: {type(e).__name__}: {e}")
                                    retry_count += 1
                                    await asyncio.sleep(5)
                                else:
                                    return

                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {entity.title} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                            with conn:
                                cursor = conn.cursor()
                                cursor.execute("""UPDATE broadcasts 
                                                SET is_active = ? 
                                                WHERE user_id = ? AND group_id = ?""",
                                               (False, user_id, entity.id))
                                if scheduler.get_job(jobs_id):
                                    scheduler.remove_job(jobs_id)

                        base = (min_m + max_m) // 2 if max_m else min_m
                        jitter = (max_m - min_m) * 60 // 2 if max_m else min_m * 30
                        trigger = IntervalTrigger(minutes=base, jitter=jitter)
                        next_run = datetime.datetime.now() + datetime.timedelta(minutes=current_time)

                        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è {ent.title} –Ω–∞ {next_run.isoformat()}")
                        scheduler.add_job(
                            send_message,
                            trigger,
                            id=job_id,
                            next_run_time=next_run,
                            replace_existing=True,
                        )
                        current_time += sec_run
        finally:
            cursor.close()

    if not scheduler.running:
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")
        scheduler.start()
