from loguru import logger
import os
import sys
from handlers import *
from config import (BOT_TOKEN, conn, bot, API_ID, API_HASH, user_clients, scheduler, cleanup_processed_callbacks)
from utils.database import create_table, delete_table
from telethon import TelegramClient
from telethon.sessions import StringSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ loguru –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
logger.remove()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

# –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
logger.add(
    sys.stderr,
    level="INFO",
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    colorize=True
)

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
logger.add(
    "logs/bot.log",
    level="DEBUG",
    format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
    rotation="10 MB",
    retention="30 days",
    compression="zip"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def load_sessions():
    cursor = conn.cursor()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        sessions = cursor.execute("SELECT user_id, session_string FROM sessions").fetchall()
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞—é {len(sessions)} —Å–µ—Å—Å–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(".sessions", exist_ok=True)
        
        for user_id, session_string in sessions:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session_file = f".sessions/user_{user_id}.session"
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —Å StringSession –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª
                client = TelegramClient(StringSession(session_string), API_ID, API_HASH)
                await client.connect()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if await client.is_user_authorized():
                    logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    logger.warning(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
                await client.disconnect()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–π: {e}")
    finally:
        cursor.close()

async def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞"""
    scheduler.start()
    scheduler.add_job(
        cleanup_processed_callbacks,
        "interval",
        hours=1,  # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
        id="cleanup_callbacks"
    )
    logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å –∑–∞–¥–∞—á–µ–π –æ—á–∏—Å—Ç–∫–∏ callback'–æ–≤")


if __name__ == "__main__":
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    create_table()
    delete_table()
    logger.info("üì± –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.start(bot_token=BOT_TOKEN)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    bot.loop.run_until_complete(load_sessions())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    bot.loop.run_until_complete(setup_scheduler())
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    bot.run_until_disconnected()
    delete_table()
    conn.close()
